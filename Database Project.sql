-- creating tables
CREATE TABLE INVENTORY_CATEGORY (
    ID          NUMBER(19, 0)    NOT NULL PRIMARY KEY,
    NAME        NVARCHAR2(100),
    DESCRIPTION NCLOB
);

CREATE TABLE INVENTORY_SUPPLIER (
    ID               NUMBER(19, 0)    NOT NULL PRIMARY KEY,
    NAME             NVARCHAR2(150),
    CONTACT_PERSON   NVARCHAR2(100),
    PHONE            NVARCHAR2(20   ),
    EMAIL            NVARCHAR2(254),
    ADDRESS          NCLOB
);

CREATE TABLE INVENTORY_PRODUCT (
    ID           NUMBER(19, 0)    NOT NULL PRIMARY KEY,
    NAME         NVARCHAR2(100),
    SKU          NVARCHAR2(50),
    QUANTITY     NUMBER(11, 0)    NOT NULL,
    PRICE        NUMBER(10, 2)    NOT NULL,
    CATEGORY_ID  NUMBER(19, 0),
    SUPPLIER_ID  NUMBER(19, 0),
    CONSTRAINT fk_product_category FOREIGN KEY (CATEGORY_ID) REFERENCES INVENTORY_CATEGORY(ID),
    CONSTRAINT fk_product_supplier FOREIGN KEY (SUPPLIER_ID) REFERENCES INVENTORY_SUPPLIER(ID)
);

CREATE TABLE INVENTORY_PURCHASE (
    ID           NUMBER(19, 0)    NOT NULL PRIMARY KEY,
    QUANTITY     NUMBER(11, 0)    NOT NULL,
    PRICE        NUMBER(10, 2)    NOT NULL,
    CREATED_AT   TIMESTAMP(6)     NOT NULL,
    PRODUCT_ID   NUMBER(19, 0)    NOT NULL,
    CONSTRAINT fk_purchase_product FOREIGN KEY (PRODUCT_ID) REFERENCES INVENTORY_PRODUCT(ID)
);

CREATE TABLE INVENTORY_SALE (
    ID           NUMBER(19, 0)    NOT NULL PRIMARY KEY,
    QUANTITY     NUMBER(11, 0)    NOT NULL,
    PRICE        NUMBER(10, 2)    NOT NULL,
    CREATED_AT   TIMESTAMP(6)     NOT NULL,
    PRODUCT_ID   NUMBER(19, 0)    NOT NULL,
    CONSTRAINT fk_sale_product FOREIGN KEY (PRODUCT_ID) REFERENCES INVENTORY_PRODUCT(ID)
);



-- View all data 
SELECT * FROM INVENTORY_CATEGORY;
SELECT * FROM INVENTORY_PRODUCT;
SELECT * FROM INVENTORY_PURCHASE;
SELECT * FROM INVENTORY_SALE;
SELECT * FROM INVENTORY_SUPPLIER;






-- Advanced SQL Queries 



-- 1. Total Inventory Value / total value of the stock
SELECT 
    SUM(p.QUANTITY * p.PRICE) AS TOTAL_INVENTORY_VALUE
FROM INVENTORY_PRODUCT p;


-- 2. Stock Value per Category
SELECT 
    c.NAME AS CATEGORY_NAME,
    SUM(p.QUANTITY * p.PRICE) AS CATEGORY_VALUE
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_CATEGORY c ON p.CATEGORY_ID = c.ID
GROUP BY c.NAME
ORDER BY CATEGORY_VALUE DESC;


-- 3. Top 5 Best-Selling Products
SELECT 
    p.NAME AS PRODUCT_NAME,
    SUM(s.QUANTITY) AS TOTAL_SOLD,
    SUM(s.PRICE * s.QUANTITY) AS TOTAL_REVENUE
FROM INVENTORY_SALE s
JOIN INVENTORY_PRODUCT p ON s.PRODUCT_ID = p.ID
GROUP BY p.NAME
ORDER BY TOTAL_SOLD DESC
FETCH FIRST 5 ROWS ONLY;


-- 4. Monthly Sales Trend
SELECT 
    TO_CHAR(s.CREATED_AT, 'YYYY-MM') AS MONTH,
    SUM(s.QUANTITY) AS TOTAL_UNITS,
    SUM(s.PRICE * s.QUANTITY) AS TOTAL_REVENUE
FROM INVENTORY_SALE s
GROUP BY TO_CHAR(s.CREATED_AT, 'YYYY-MM')
ORDER BY MONTH;


-- 5. Low Stock Alert
SELECT 
    p.NAME AS PRODUCT_NAME,
    p.QUANTITY,
    c.NAME AS CATEGORY_NAME,
    sup.NAME AS SUPPLIER_NAME
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_CATEGORY c ON p.CATEGORY_ID = c.ID
JOIN INVENTORY_SUPPLIER sup ON p.SUPPLIER_ID = sup.ID
WHERE p.QUANTITY < 10
ORDER BY p.QUANTITY ASC;


-- 6. Supplier Contribution to Stock
SELECT 
    sup.NAME AS SUPPLIER_NAME,
    SUM(p.QUANTITY) AS TOTAL_UNITS,
    SUM(p.QUANTITY * p.PRICE) AS STOCK_VALUE
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_SUPPLIER sup ON p.SUPPLIER_ID = sup.ID
GROUP BY sup.NAME
ORDER BY STOCK_VALUE DESC;


-- 7. Profit by Product
SELECT 
    p.NAME AS PRODUCT_NAME,
    NVL(SUM(s.QUANTITY * s.PRICE), 0) AS SALES_VALUE,
    NVL(SUM(pr.QUANTITY * pr.PRICE), 0) AS PURCHASE_COST,
    NVL(SUM(s.QUANTITY * s.PRICE), 0) - NVL(SUM(pr.QUANTITY * pr.PRICE), 0) AS PROFIT
FROM INVENTORY_PRODUCT p
LEFT JOIN INVENTORY_SALE s ON p.ID = s.PRODUCT_ID
LEFT JOIN INVENTORY_PURCHASE pr ON p.ID = pr.PRODUCT_ID
GROUP BY p.NAME
ORDER BY PROFIT DESC;


-- 8. Unsold Products
SELECT 
    p.ID, p.NAME
FROM INVENTORY_PRODUCT p
WHERE NOT EXISTS (
    SELECT 1 FROM INVENTORY_SALE s WHERE s.PRODUCT_ID = p.ID
);


-- 9. Most Recent Purchases per Product
SELECT 
    p.NAME AS PRODUCT_NAME,
    pr.QUANTITY,
    pr.PRICE,
    pr.CREATED_AT
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_PURCHASE pr ON p.ID = pr.PRODUCT_ID
WHERE pr.CREATED_AT = (
    SELECT MAX(sub.CREATED_AT)
    FROM INVENTORY_PURCHASE sub
    WHERE sub.PRODUCT_ID = p.ID
);


-- 10. Daily Sales Summary
SELECT 
    TRUNC(s.CREATED_AT) AS SALE_DATE,
    SUM(s.QUANTITY) AS TOTAL_UNITS,
    SUM(s.PRICE * s.QUANTITY) AS TOTAL_REVENUE
FROM INVENTORY_SALE s
GROUP BY TRUNC(s.CREATED_AT)
ORDER BY SALE_DATE DESC;


-- 11. Fastest Selling Products (by average daily sales)
SELECT 
    p.NAME AS PRODUCT_NAME,
    ROUND(SUM(s.QUANTITY) / COUNT(DISTINCT TRUNC(s.CREATED_AT)), 2) AS AVG_UNITS_PER_DAY
FROM INVENTORY_SALE s
JOIN INVENTORY_PRODUCT p ON s.PRODUCT_ID = p.ID
GROUP BY p.NAME
ORDER BY AVG_UNITS_PER_DAY DESC;


-- 12. Products with Negative or Zero Stock (Error Check)
SELECT 
    p.ID,
    p.NAME,
    p.QUANTITY
FROM INVENTORY_PRODUCT p
WHERE p.QUANTITY <= 0;


-- 13. Products Never Purchased
SELECT 
    p.ID, p.NAME
FROM INVENTORY_PRODUCT p
WHERE NOT EXISTS (
    SELECT 1 FROM INVENTORY_PURCHASE pr WHERE pr.PRODUCT_ID = p.ID
);


-- 14. Highest Priced Product in Each Category
SELECT 
    c.NAME AS CATEGORY_NAME,
    p.NAME AS PRODUCT_NAME,
    p.PRICE
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_CATEGORY c ON p.CATEGORY_ID = c.ID
WHERE p.PRICE = (
    SELECT MAX(p2.PRICE)
    FROM INVENTORY_PRODUCT p2
    WHERE p2.CATEGORY_ID = c.ID
);


-- 15. Supplier with Maximum Unique Products
SELECT 
    sup.NAME AS SUPPLIER_NAME,
    COUNT(DISTINCT p.ID) AS UNIQUE_PRODUCTS
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_SUPPLIER sup ON p.SUPPLIER_ID = sup.ID
GROUP BY sup.NAME
ORDER BY UNIQUE_PRODUCTS DESC
FETCH FIRST 1 ROW ONLY;


-- 16. Cumulative Sales Over Time (Running Total)
SELECT 
    TRUNC(s.CREATED_AT) AS SALE_DATE,
    SUM(s.QUANTITY * s.PRICE) AS DAILY_SALES,
    SUM(SUM(s.QUANTITY * s.PRICE)) 
        OVER (ORDER BY TRUNC(s.CREATED_AT)) AS CUMULATIVE_SALES
FROM INVENTORY_SALE s
GROUP BY TRUNC(s.CREATED_AT)
ORDER BY SALE_DATE;


-- 17. Top 3 Products per Category by Sales
SELECT *
FROM (
    SELECT 
        c.NAME AS CATEGORY_NAME,
        p.NAME AS PRODUCT_NAME,
        SUM(s.QUANTITY) AS TOTAL_SOLD,
        RANK() OVER (PARTITION BY c.NAME ORDER BY SUM(s.QUANTITY) DESC) AS RANK_IN_CATEGORY
    FROM INVENTORY_SALE s
    JOIN INVENTORY_PRODUCT p ON s.PRODUCT_ID = p.ID
    JOIN INVENTORY_CATEGORY c ON p.CATEGORY_ID = c.ID
    GROUP BY c.NAME, p.NAME
)
WHERE RANK_IN_CATEGORY <= 3;


-- 18. Average Purchase Price vs Sale Price per Product
SELECT 
    p.NAME AS PRODUCT_NAME,
    ROUND(AVG(DISTINCT pr.PRICE), 2) AS AVG_PURCHASE_PRICE,
    ROUND(AVG(DISTINCT s.PRICE), 2) AS AVG_SALE_PRICE
FROM INVENTORY_PRODUCT p
LEFT JOIN INVENTORY_PURCHASE pr ON p.ID = pr.PRODUCT_ID
LEFT JOIN INVENTORY_SALE s ON p.ID = s.PRODUCT_ID
GROUP BY p.NAME;


-- 19. Most Recently Sold Product
SELECT 
    p.NAME AS PRODUCT_NAME,
    s.QUANTITY,
    s.PRICE,
    s.CREATED_AT
FROM INVENTORY_SALE s
JOIN INVENTORY_PRODUCT p ON s.PRODUCT_ID = p.ID
WHERE s.CREATED_AT = (SELECT MAX(CREATED_AT) FROM INVENTORY_SALE);


-- 20. Supplier with the Highest Sales Revenue
SELECT 
    sup.NAME AS SUPPLIER_NAME,
    SUM(s.QUANTITY * s.PRICE) AS TOTAL_REVENUE
FROM INVENTORY_SALE s
JOIN INVENTORY_PRODUCT p ON s.PRODUCT_ID = p.ID
JOIN INVENTORY_SUPPLIER sup ON p.SUPPLIER_ID = sup.ID
GROUP BY sup.NAME
ORDER BY TOTAL_REVENUE DESC
FETCH FIRST 1 ROW ONLY;


-- 21. Products with Above-Average Sales
SELECT 
    p.NAME AS PRODUCT_NAME,
    SUM(s.QUANTITY) AS TOTAL_SOLD
FROM INVENTORY_PRODUCT p
JOIN INVENTORY_SALE s ON p.ID = s.PRODUCT_ID
GROUP BY p.NAME
HAVING SUM(s.QUANTITY) > (
    SELECT AVG(SUM(s2.QUANTITY))
    FROM INVENTORY_SALE s2
    GROUP BY s2.PRODUCT_ID
);


-- 22. Products with No Supplier Assigned
SELECT 
    p.ID, p.NAME
FROM INVENTORY_PRODUCT p
WHERE p.SUPPLIER_ID IS NULL;


-- 23. Most Popular Category by Sales Revenue
SELECT 
    c.NAME AS CATEGORY_NAME,
    SUM(s.QUANTITY * s.PRICE) AS TOTAL_REVENUE
FROM INVENTORY_SALE s
JOIN INVENTORY_PRODUCT p ON s.PRODUCT_ID = p.ID
JOIN INVENTORY_CATEGORY c ON p.CATEGORY_ID = c.ID
GROUP BY c.NAME
ORDER BY TOTAL_REVENUE DESC
FETCH FIRST 1 ROW ONLY;


-- 24. Daily Sales Growth (Difference from Previous Day)
SELECT 
    SALE_DATE,
    DAILY_SALES,
    DAILY_SALES - LAG(DAILY_SALES) OVER (ORDER BY SALE_DATE) AS GROWTH
FROM (
    SELECT 
        TRUNC(s.CREATED_AT) AS SALE_DATE,
        SUM(s.QUANTITY * s.PRICE) AS DAILY_SALES
    FROM INVENTORY_SALE s
    GROUP BY TRUNC(s.CREATED_AT)
)
ORDER BY SALE_DATE;







